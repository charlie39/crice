#!/usr/bin/bash
#-------------------------------------------------------------------------------------------------------------------------------
#   					Files and Directories
#-------------------------------------------------------------------------------------------------------------------------------
# setting up some environment variables depending on X,Wayland or terminal
wtr_theme="/usr/share/rofi/themes/lb"
ROFI=(rofi -i -dmenu -theme $wtr_theme)

if [ -z $DISPLAY ]; then
    READER="less"
    ROFI=( fzf -m --preview "cat <(mediainfo {})" )
fi

# helper functions ----------------------------------------------------------------------------
__dynamic() {
    a=( "${@}" )
    last_opt=${a[${#a[@]}]}
    if [[ $last_opt =~ [0-9] ]];then
        md=$last_opt
        if [ "$#" -gt 1 ];then
            a[$#]=""
            opt=${a[@]}
        fi
    elif [[ $# -ge 1 ]];then
        opt=${a[@]}
    fi
}

__helper () {
    arr=( $(nvr --serverlist | awk 'BEGIN{RS="";FS="\n"}{print}') )
    if [[ ${#arr[@]} -ge 1 ]];then
        for i in "${arr[@]}"; do
            if [ $i = $NVIM_LISTEN_ADDRESS ];then
                EDITOR="nvr --remote-silent --servername $NVIM_LISTEN_ADDRESS"
                Flag=1
                break
            fi
        done
        ! (( Flag )) || return 0
        EDITOR="nvr --remote --servername $(nvr --serverlist | rofi  -theme /usr/share/rofi/themes/purple.rasi -dmenu -p "nvim servers" -i)"
        if [ $(echo $EDITOR |awk '{print $NF}' ) = "--servername" ];then
            EDITOR="nvim"
        fi
    fi
}
#-------------------------------------------------------------------------------------------
#editing scripts and files {local}
function el {
    echo "k"
    __helper
    opt=( ~cf/ ~pr/ ~sb/ ~vvt/ ~pjg/ ~/vimwiki/ )
    md=5
    __dynamic "$@"
    find $(echo $opt) -maxdepth $md -type f -o -type l 2>/dev/null |\
        fzf  --bind 'ctrl-x:execute-silent(echo {} | xclip -sel p)+abort'\
        --bind 'ctrl-alt-x:execute-silent(cat {}|xclip -sel p)+abort'\
        --keep-right -m --preview 'bat --color always -p  {}' --preview-window 70%:border\
        --color 'fg:#bbccdd,fg+:#ddeeff,preview-bg:#000000,border:#332288' |\
        xargs -r -I {}  bash -c '$EDITOR {}' ; }
        # xargs -rd $'\n' bash -c '$EDITOR $@;echo \""$@"|"' ; }

# fzf --bind 'f1:execute(less -f  {}),ctrl-y:execute-silent(echo {} | xclip -sel p)+abort'
#editing scripts and files {global}
eg() {
    opt=(/etc /var /usr)
    md=7
    __dynamic "$@"
    sudo find $(echo $opt) -maxdepth $md -type f  -path /home  -prune -o -print 2>/dev/null |\
        fzf  -m --layout reverse --info inline --preview 'bat --color always  {}' \
        --preview-window border --color 'fg:#bbccdd,fg+:#ddeeff,preview-bg:#000000,border:#332288' |\
        xargs -r -I {} sudoedit {} ;\
}

pics() {
    opt=~pp/
    md=5
    __dynamic "$@"
    find $(echo $opt) -maxdepth $md -iregex ".*\.\(png\|jpg\|jpeg\|bmp\|gif\|svg\)" 2>/dev/null |\
    fzf --preview 'chafa -f symbols -s 60 {}' --keep-right \
    --bind 'alt-Y:execute-silent(echo {} | xclip -sel c)+abort'\
    --bind 'alt-p:execute-silent(imv {})'\
    --bind 'alt-P:execute-silent(cat {} |xclip -sel p)+abort' -m | xargs -I {} imv {} ;
}

#generate qrcode of any text
qrcode() {
    [[ $1 =~ ^f$ ]] && qrencode -l H --size 10  -r $2 -o - | display -geometry +200+200 -title "from $2" - 2>/dev/null  && return
    [[ $1 =~ ^(p|c|s)$ ]] || { echo -e "${1}" | qrencode -l H --size 10 -o - | display -geometry +200+200 -title "$1" - 2>/dev/null && return ; }
    xclip -o -sel $1 | qrencode -l H --size 10 -o - | display -geometry +200+200 -title "from clipboard" - 2>/dev/null  ;
}

#fetch lyrics
lyrics() {
    artist="${1}"
    title="${2}"
    lyricsAPI="https://makeitpersonal.co/lyrics/"
    curl -s --get "$lyricsAPI" --data-urlencode "artist=$artist" --data-urlencode "title=$title"
}
#changing directory by file/directory name {local}
function cdl {
    cd "$(find  ~pr/ ~cf/ ~/.local/ ~/.cache/paru/ ~/vimwiki/ -type d |\
    fzf  --layout reverse --height 50% --info inline \
    --preview 'lsd --color=always --icon always {}')" ;\
}

#changing directory by file/directory name {global}
cdg() {
    cd "$( sudo find / -type d -path /home -type d -prune -o -print |\
    fzf --layout reverse --height 50% --info inline --preview 'tree -C {}')" ;\
}

#change directory {shared directory}
cdD() { cd "$( find  ~D/ ~D/CellPhones/ -type d| fzf --preview 'tree -C {1}')" ; }

# WIP
rf() {
    local INITIAL_QUERY=""
    local RG_PREFIX="rg --column --line-number --no-heading --follow --color=always --smart-case "
    local FZF_DEFAULT_COMMAND="$RG_PREFIX '$INITIAL_QUERY' $@"

    fzf --bind "change:reload:$RG_PREFIX {q} || true" \
        --bind "ctrl-m:execute(less -f file)"  \
        --ansi --disabled --query "$INITIAL_QUERY"\
        --height=50% --layout=reverse | cut -d":" -f1

   unset FZF_DEFAULT_COMMAND RG_PREFIX
}

#-------------------------------------------------------------------------------------------------------------------------------
# 								process mgt
#-------------------------------------------------------------------------------------------------------------------------------
process() {
    ps -ef | fzf --bind 'ctrl-m:reload(ps aux)' \
        --header 'Press CTRL-R to reload' \
        --header-lines=1 --height=50% --layout=reverse --preview ""
}

#-------------------------------------------------------------------------------------------------------------------------------
#                     			Package Management
#-------------------------------------------------------------------------------------------------------------------------------
#preview packages before installation
pf() { pacman -Slq | fzf -m --preview 'cat <(pacman -Sii {1}) <(pacman -Fl {1} | awk "{ print $2}")' | xargs -ro sudo pacman -S ; }

#preview AUR packages before installation paru
paf() { paru -Slq -a | fzf -m --preview 'cat <(paru -Sii {1})' | xargs -ro paru --fm /usr/bin/ranger -S ; }

#browse and purge installed packages with preview
pacbrowse() { pacman -Qq | fzf -m --preview 'pacman -Qil {}' --layout=reverse --bind 'enter:execute(pacman -Qil {} | less),ctrl-x:execute(sudo pacman -Rns --noconfirm {})' ;}

#----------------------------------------------------------------------------------------------------------------
# 									Misc
#----------------------------------------------------------------------------------------------------------------
__find_a() {
    echo "${list[@]}" | tr ' ' '\n' | tr '%' ' '
}

#watch videos #rofi
wtr() {
    local opt=(~vv/ ~M/) md=6
    __dynamic "$@"
    list=( $(find -L $(echo $opt)  -maxdepth $md -type f -size +1M | egrep ".*\.[mawo].{2,3}" | sed '/\.srt$/d' |tr ' ' '%') )
    pattern=( $( __find_a | sed -E 's/^([^/]*\/){4}//;s/\..{2,5}$//' |  ${ROFI[@]} ) ) || return
    __find_a | grep -F "${pattern}"| xargs -rd $'\n'  sh -c '"$VPLAYER" "$@";echo \""$@"\"' ''
}
# wtr() {
#     local opt=(~vv/ ~M/) md=6
#     __dynamic "$@"
    # find -L $(echo $opt)  -maxdepth $md | grep -F "$(find -L $(echo $opt) -maxdepth $md -size +1M|\
    # egrep ".*\.[mawo].{2,3}" |cut -d'/' -f5- | sed -E 's/\..{2,5}$//' | ${ROFI[@]} $wtr_theme |\
    # sed 's/$/./' )"| awk -F '.' '!/\.srt$/&&FNR==1&&NF>1'|\
    # xargs -rd $'\n'  sh -c '"$VPLAYER" "$@";echo \""$@"\"' ''
# }
fplay() {
    #run karma periodically to keep the playlist updated
    playlist=~/Videos/Playlist.m3u8
    [[ -f ${1} ]] && playlist=${1}
    cat "$playlist" | fzf --keep-right \
        --bind "alt-Y:execute-silent(echo {} | xclip -sel c)" \
        --bind "alt-p:execute-silent( echo "{}" | xargs -r -I {} vlc {})" |\
        xargs -r -I {} $VPLAYER {}
    echo $playlist
}

#download large files from google drive #WIP
gdrive_download () {
  CONFIRM=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate "https://docs.google.com/uc?export=download&id=$1" -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')
  wget --load-cookies /tmp/cookies.txt "https://docs.google.com/uc?export=download&confirm=$CONFIRM&id=$1" -O $2
  rm -rf /tmp/cookies.txt
}

#same as above
gdrive2_download () {
  CONFIRM=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate "https://drive.google.com/uc?export=download&id=$1" -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')
  wget --load-cookies /tmp/cookies.txt "https://drive.google.com/uc?export=download&confirm=$CONFIRM&id=$1" -O $2
  rm -rf /tmp/cookies.txt
}

#------------------------------------------------------------------------------------------------------------------
# 								VPN and DoH
#-----------------------------------------------------------------------------------------------------------------

__ws_connect() {
	[ "${1}" = "best" ] && windscribe connect best && return
    ! [ -z "$DISPLAY" ] && DMENU+=(-l 25)
        awk '!/*|\[/' ~/vimwiki/ws-vpn-servers.md |\
        "${DMENU[@]}"  |\
        awk 'FNR==1&&NF>1 {print}' | cut -c23-26 |\
        tr -d ' ' | xargs -I {} windscribe connect {}  2>/dev/null
    }

# manage windscribe VPN
ws() {
	case "$1" in
		h) windscribe --help ;;
		*) if [ "$(pgrep windscribe)" ] ; then
			 [[ "$1" == "disconnect" ]] && windscribe disconnect && sudo systemctl stop windscribe && return
			__ws_connect "$1"
		   else (sudo systemctl start windscribe && printf '%20s' 'VPN Server booting.. Give it 10 sec' && sleep 10 && __ws_connect)
		   fi ;;
	esac
}

# change DNS server
prx() {
    [ $DISPLAY = "wayland" ] && DMENU=(bemenu ) || ([ -z $DISPLAY ] && DMENU=(fzf) || DMENU=(dmenu ) )
	 typeset -A proxyDNSs nsglobal
	 proxyDNSs=(
		 ['NextDNS']="nextdns"
		 ['Cloudflared']="cloudflared@cloudflared"
	 )
	nsglobal=(
		['google1']="8.8.8.8"
		['google2']="8.8.4.4"
		['cloudflare1']="1.1.1.1"
		['cloudflare2']="1.0.0.1"
		['cloudflare3']="208.67.222.222"
		['cloudflare4']="208.67.220.220"
	)
	local cmd='sudo systemctl start' somebody=""

	 somebody="$(sudo lsof -i:53 | awk -F' ' 'NR==2 {print $1}')"



     if [[ "$1" =~ (s|stop|kill) ]]; then
		  if [ "$somebody" ]; then
			  sudo pkill "$somebody" || exit
              echo -e "# Generated by prx\nnameserver ${nsglobal[cloudflare3]}" | sudo tee /etc/resolv.conf
              return
		  else
			  echo "No DNS server running on port 53"
			  return
		  fi
	  elif [ "$1" != "" ]; then
		  echo -e "invalid argument.\nprx [option]\nOption:\n[s|stop|kill] -- stop a running server\n"
		  echo "Don't pass any argument to start a server"
		  return
	 fi

	 [ "$somebody" ] && echo -e "$somebody is listening on port 53\nRun with 's' to stop it" && return

	local proxy=$(echo "${(@k)proxyDNSs}" |tr ' ' '\n' | $DMENU  | tr -d ' ')

	 case $proxy in
		Cloudflared)
            `echo $cmd` "${proxyDNSs[$proxy]}" || ( echo "couldn't start proxy DNS server" && exit )
             echo "Cloudflared started..."
			 echo -e "#Generated by prx\nnameserver 127.0.0.1" |sudo tee /etc/resolv.conf > /dev/null ;;
		NextDNS)
            `echo $cmd` "${proxyDNSs[$proxy]}" || (echo "couldn't start proxy DNS server" && exit)
             sleep 3
             echo -e "NextDNS listening on port 53" ;;
	esac ;
	unset proxyDNSs nsglobal
}


#------------------------------------------------------------------------------------------------------------
# 								JDK Management
#------------------------------------------------------------------------------------------------------------


__jset() { local cmd='sudo archlinux-java set' && `echo $cmd` "${1}" && echo -e "\033[32m $(archlinux-java status | rg 'default' | cut -d'(' -f1) is set" ;}

#select jdk
cj() {
    # for i in "$(archlinux-java status)"; do
    # echo -e "\033[34m$i";
    # done

    case  $1 in
        8)  	  __jset java-8-openjdk ;;
        11)    	  __jset 11.0.6.j9-adpt  ;;
        12) 	  __jset java-12-jdk ;;
        12o)      __jset java-12-openjdk ;;
        15)	  __jset java-15-jdk ;;
        15fx)     __jset zulu-javafx-15.28.51 ;;
        *)   	  echo -e "\033[35mAvailable JDKs and their option.\nChoose the appropriate option:\n
8    -->  java-8-openkjdk
11   -->  11.0.6.j9-adpt
12   -->  java-12-jdk
12o  -->  java-12-openkjdk
14   -->  java-14-jdk
15   -->  java-15-jdk
15fx -->  zulu-javafx-15.28.51
* e.g ->  $0 11" ;;
    esac ;
}
