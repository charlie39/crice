#!/usr/bin/sh

# Author: charlie39( iamkg050392 at gmail dot com)
# Github : https://github.com/charlie39

# I release this script in the public domain
# you can do whatever you like with it


# your wifi interface:
Interface="wlo1"

#y our DHCP client:e.g - dhcpcd,dhclient
dhcpclient="dhcpcd"


# path to your wpa_supplicant.conf
WPA_SUPPLICANTCONF=$HOME/.config/wpa/wpa_supplicant.conf
# mkdir -p "$WPA_SUPPLICANTCONF"

#Path to a wifi icon
WIFI_ICON="/usr/share/icons/Pop/32x32/devices/network-wireless.png"

# make sure interface is not blocked:
sudo rfkill unblock "$(rfkill|grep wlan|cut -d' ' -f2)"

# initiate the interface:
[ "$(grep -q $Interface <(ip link show up ))" ] || sudo ip link set $Interface  up

# you can install wireless_tools and get the SSIDs of available networks
# iwlist scan | grep SSID

check() {
    type $1 > /dev/null || { echo "$1 is installed" && exit 1 ; }
}

check wpa_supplicant
check $dhcpclient
check ip
type notify-send >/dev/null && notify=1

OPT=$(getopt -o :hntv --long :help,new,term,verbose -a -n 'wifi_s' -- "$@")
eval set -- "$OPT"
unset OPT

while true;do
    case $1 in
        -h|--help) h=1 $1 ;break ;;
        -n|--new) new_con=1 ;break ;;
        -t|--term) term=1 ; break ;;
        -v|--verbose) set -x;shift ;;
        *) break;;
    esac
done

help() {

    cat <<END
    $(figlet $(basename $0))

A minimal wifi network manager
____________________________________________________
        Args --------- Meaning
____________________________________________________

   -n|-new ---------- create new connnection/password
   -s|-term --------- Terminate wpa_supplicant & dhcp client
   -h|-help --------- Help
   -v|-verbose ------ Verbose output
END
exit 0
}


# Teminate connection
terminate() {
    sudo pkill -KILL $dhcpclient
    sudo wpa_cli terminate $Interface && (( notify )) && notify-send -u low -i $WIFI_ICON "ï‡«" "$Interface is disconnected"
    exit
}

#generate asterisk for passphrase prompt
__asterisk_prompt_for_passphrase() {
    unset passphrase
    prompt="Enter Passphrase: "
    while IFS= read -r -p "$prompt" -s -n 1 char
    do
        #Enter - accept passphrase
        if [[ $char == $'\0' ]] ; then
            echo
            break
        fi
        #Backspace
        if [[ $char == $'\177' ]]; then
            prompt=$'\b \b'
            passphrase="${passphrase%?}"
        else
            prompt="*"
            passphrase+="$char"
        fi
    done
}

main() {

#4. generate wpa_supplicant.conf with SSID and passphrase if it doesn't already exist:
if ! [ -s "$WPA_SUPPLICANTCONF" ]; then

    read -r -p "It appears no Network is configured. Would you like to configure one(y/N)? " YN
    [[ $YN =~ [nN] || -z $YN ]] &&  exit 0;
    if [[ $YN =~ [yY] ]]; then
        read -r -p "Would you like to control wpa_supplicant with its frontend tool wpa_cli?(y/N) " YesNo
        [[ $YesNo =~ [Yy] ]] && echo -e "ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=$USER" >  "$WPA_SUPPLICANTCONF"
        read -r -p "Entere the SSID: " SSID
        __asterisk_prompt_for_passphrase
        wpa_passphrase "$SSID" "$passphrase" >>  "$WPA_SUPPLICANTCONF"
        chmod 600 "$WPA_SUPPLICANTCONF"
        (( $(pgrep  wpa_supplicant) )) && terminate
        unset YN
        main
    else
        echo "Wrong choice" >&2
        echo "try again" >&2
        exit 1
    fi
fi
    #you may require to mention a driver wrapper with -D nl80211,wext. Refer wpa_supplicant(8)
    [ $( pgrep wpa_supplicant ) ] || { sudo wpa_supplicant -c "$WPA_SUPPLICANTCONF" -i"$Interface" -B && exit_code=$? ; }
    if [[ $exit_code -eq 0 ]];then
	    echo "wpa supplicant initialised"
    elif [[ -n $exit_code ]]; then
	    echo "wpa supplicant initialisation error: $exit_code"
	    exit 1
    fi

    #6. If dhcp client is not running, start it to get a lease:
    if [[ $(pidof $dhcpclient) ]]; then
        sudo $dhcpclient -k $Interface
        sudo $dhcpclient $Interface
    else
	echo "starting $dhcpclient ..."
	echo "scanning for network..."
        sudo $dhcpclient $Interface
	e_status=$?
	if [[ $e_status  -eq 1 ]]; then
		(( notify )) && notify-send -u low -i $WIFI_ICON "No wifi found" "Check and confirm the network is visible"
		echo "No wifi network found"
		exit 1
	elif [[ $e_status -ne 0 ]]; then
		(( notify )) && notify-send -u low -i $WIFI_ICON "Wifi problem" "Couldn't initiate connection : $e_status "
		exit $?
	fi
	echo "$dhcpcclient started!"
    fi
    echo "ï‡«  Connection established"
    (( notify )) && notify-send -u low -i $WIFI_ICON "ï‡« " "Connection established"
    unset dhcpclient Interface

    if ping google.com -c 1 &>/dev/null; then
        (( notify )) && notify-send -u low -i $WIFI_ICON "Network is up" "enjoy ðŸ™‚"
        return 0
    fi
    (( notify )) && notify-send -u low -i $WIFI_ICON "ðŸ˜¢" "Can't ping google"
}

#Generate new network/password by passing n
new_connection() {
    read -r -p "Entere the SSID: " SSID
    __asterisk_prompt_for_passphrase
    read -r -p "Would you like to control wpa_supplicant with its frontend tool wpa_cli?(y/N) " YesNo
    [ -s $WPA_SUPPLICANTCONF ] && /bin/mv -f $WPA_SUPPLICANTCONF "${WPA_SUPPLICANTCONF}.bak"
    [[ $YesNo =~ [Yy] ]] && echo -e "ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=$USER" >  "$WPA_SUPPLICANTCONF"
    [[ $SSID ]] && wpa_passphrase "$SSID" "$passphrase" >> "$WPA_SUPPLICANTCONF"
    (( $(pgrep  wpa_supplicant) )) && terminate
    unset YesNo
    main

}

# shellcheck disable=SC3006
(( term )) && terminate && return
# shellcheck disable=SC3006
(( new_con ))  && new_connection && return
main


