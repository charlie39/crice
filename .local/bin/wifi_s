#!/usr/bin/sh

#Connect to wifi with wpa_supplicant
#Your wifi interface:
Interface="wlo1"

#Your DHCP client:e.g - dhcpcd,dhclient
dhcpclient="dhcpcd"

ADDR=192.168.43.168

#path to your wpa_supplicant.conf
WPA_SUPPLICANTCONF=$HOME/.config/wpa/wpa_supplicant.conf
# mkdir -p "$WPA_SUPPLICANTCONF"

#1. make sure interface is not blocked:
sudo rfkill unblock "$(rfkill|grep wlan|cut -d' ' -f2)"

#2. initiate the interface:
[ "$(grep $Interface <(ip link show up ))" ] || sudo ip link set $Interface  up
#or
#ifconfig wlo1 up

#3. get SSID: sudo:
#iwlist scan | grep SSID

usage() {

    cat <<END
    $(figlet $(basename $0))

A minimal wifi network manager
____________________________________________________
        Args --------- Meaning
____________________________________________________

   -n|-new ---------- create new connnection/password
   -s|-term --------- Terminate wpa_supplicant & dhcp client
   -h|-help --------- Help
   -v|-verbose ------ Verbose output
END
exit 0
}


# Teminate connection
terminate() {
    sudo wpa_cli terminate $Interface
    sudo pkill $dhcpcclient
    exit 1
}

#generate asterisk for passphrase prompt
__asterisk_prompt_for_passphrase() {
    unset passphrase
    prompt="Enter Passphrase: "
    while IFS= read -r -p "$prompt" -s -n 1 char
    do
        #Enter - accept passphrase
        if [[ $char == $'\0' ]] ; then
            echo
            break
        fi
        #Backspace
        if [[ $char == $'\177' ]]; then
            prompt=$'\b \b'
            passphrase="${passphrase%?}"
        else
            prompt="*"
            passphrase+="$char"
        fi
    done
}

main() {

    #you may require to mention a driver wrapper with -D nl80211,wext. Refer wpa_supplicant(8)
    [ "$(sudo wpa_supplicant -c "$WPA_SUPPLICANTCONF" -i"$Interface" -B)" ] || echo "WPA Supplicant returned error $?"

    echo "WIFI Connection Established!.Checking DHCP..."

    #6. If dhcp client is not running, start it to get a lease:
    if [[ $(pidof $dhcpclient) ]]; then
        sudo $dhcpclient -k $Interface
        sudo $dhcpclient $Interface
    else
        sudo $dhcpclient $Interface
    fi
    echo "starting $dhcpclient ..."
    echo "$dhcpcclient started!"
    unset dhcpclient Interface

    ping google.com -c 1 &>/dev/null && notify-send "Network is up" "enjoy"
}

#4. generate wpa_supplicant.conf with SSID and passphrase if it doesn't already exist:
if ! [ -s "$WPA_SUPPLICANTCONF" ]; then

    read -r -p "It appears no Network is configured. Would you like to configure one(y/N)? " YN
    [[ $YN =~ [nN] || -z $YN ]] &&  exit 0;
    if [[ $YN =~ [yY] ]]; then
        read -r -p "Would you like to control wpa_supplicant with its frontend tool wpa_cli?(y/N) " YesNo
        [[ $YesNo =~ [Yy] ]] && echo -e "ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=$USER" >  "$WPA_SUPPLICANTCONF"
        read -r -p "Entere the SSID: " SSID
        __asterisk_prompt_for_passphrase
        wpa_passphrase "$SSID" "$passphrase" >>  "$WPA_SUPPLICANTCONF"
        chmod 600 "$WPA_SUPPLICANTCONF"
        (( $(pgrep  wpa_supplicant) )) && terminate
        unset YN
        main
        don=1
    else
        echo "Wrong choice" >&2
        echo "try again" >&2
        exit 1
    fi
fi

#Generate new network/password by passing n
new_connection() {
   (( don )) || return
    read -r -p "Entere the SSID: " SSID
    __asterisk_prompt_for_passphrase
    read -r -p "Would you like to control wpa_supplicant with its frontend tool wpa_cli?(y/N) " YesNo
    [[ $YesNo =~ [Yy] ]] && echo -e "ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=$USER" >  "$WPA_SUPPLICANTCONF"
    [[ $SSID ]] && wpa_passphrase "$SSID" "$passphrase" >> "$WPA_SUPPLICANTCONF"
    (( $(pgrep  wpa_supplicant) )) && terminate
    don=1
    unset YesNo
    main

}


OPT=$(getopt -o :hntv --long :help,new,term,verbose -a -n 'wifi_s' -- "$@")
eval set -- "$OPT"
unset OPT

while true;do
    case $1 in
        -h|--help) usage ;shift ;;
        -n|--new) new_connection ;shift ;;
        -t|--term) terminate ; shift ;;
        -v|--verbose) set -x;shift ;;
        *) main;break;;
    esac
done

